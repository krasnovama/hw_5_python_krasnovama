# # 38. Напишите программу, удаляющую из текста все слова, содержащие "абв".
# my_txt = input("Введите текст: ")
# my_txt = my_txt.split(" ")
# print(*filter(lambda x: not "абв" in x, my_txt))
#
# # 39. Создайте программу для игры с конфетами человек против человека.
# # Условие задачи: На столе лежит 2021 конфета. Играют два игрока делая ход друг после друга.
# # Первый ход определяется жеребьёвкой. За один ход можно забрать не более чем 28 конфет.
# # Все конфеты оппонента достаются сделавшему последний ход. Сколько конфет нужно взять первому игроку,
# # чтобы забрать все конфеты у своего конкурента?
# # a) Добавьте игру против бота (рандомный выбор конфет)
# # b) Подумайте как наделить бота "интеллектом"
# #
#
# # ПОЛНОСТЬЮ САМОСТОЯТЕЛЬНО ДАННУЮ ЗАДАЧУ РЕШИТЬ МНЕ НЕ УДАЛОСЬ
# # ИСПОЛЬЗУЮ РЕШЕНИЕ ПО АНАЛОГИИ С ДРУГОЙ ЗАДАЧЕЙ С ПОМОЩЬЮ ПОИСКОВИКА
# # В РЕШЕНИИ ОТРАЖЕНА ИГРА С ПОМОЩЬЮ БОТА (ВАРИАНТ В ЗАДАНИЯ)
# # НАД РЕШЕНИЕМ МЕЖДУ ДВУМЯ ИГРОКАМИ И С НЕ ИНТЕЛЛЕКТУЛЬНЫМ БОТОМ ПОДУМАЮ ДОПОЛНИТЕЛЬНО
# import random
# def start():
#     print(f'########################################################')
#     print(f'Всего на столе 2021 конфета')
#     print(f'Каждый игрок по очереди берет от 1 до 28 конфет')
#     print(f'Выигрывает тот, кто заберет последние конфеты!')
#     print(f'######################################################\n')
#
#
# def rnd_turn():
#     print(f'Выбор очередности ходов: ')
#     print(f'Введите 0, если ходить первым будет игрок')
#     print(f'Введите 1, если ходить первым будет компьютер')
#     print(f'Введите 2, чтобы выбрать очередность ходов случайным образом')
#     while True:
#         n = input('> ')
#         if n.isdigit():
#             n = int(n)
#             if n > 2 or n < 0:
#                 print(f'Введите число 0, 1 или 2')
#             else:
#                 if n == 2:
#                     n = random.randint(0, 1)
#                 if n == 0:
#                     print(f'Первым будет ходить игрок!')
#                 else:
#                     print(f'Первым будет ходить компьютер!')
#                 break
#         else:
#             print(f'Вы ввели недопустимый символ. Введите число 0, 1 или 2')
#     return n
#
#
# def turn_player(matches):
#     n = 29
#     while n > 28 or n < 1:
#         n = input('Сколько вы возьмете конфет? ')
#         if n.isdigit():
#             n = int(n)
#             if n > 28 or n < 1:
#                 print(f'Вы вязли недопустимое количества конфет! Возьмите от 1 до 28')
#             if n > matches:
#                 print(f'Вы взяли больше чем осталось конфет!')
#                 n = 29
#         else:
#             print(f'Вы ввели недопустимые символы. Введите число от 1 до 28')
#             n = 29
#     return n
#
#
# def turn_ai(matches):
#     n = matches % 29
#     if n == 0:
#         n = random.randint(1, 28)
#     return n
#
#
# matches = 2021
# count = 1
# start()
# turn = rnd_turn()
# while True:
#     print(f'\n******** Ход номер: {count} ********')
#     if turn % 2 == 0:
#         print(f'Ход игрока! Всего конфет: {matches}')
#         n = turn_player(matches)
#         print(f'Игрок взял конфет: {n}')
#     elif turn % 2 == 1:
#         print(f'Ход компьютера! Всего конфет: {matches}')
#         n = turn_ai(matches)
#         print(f'Компьютер взял конфет: {n}')
#     matches -= n
#     if matches == 0:
#         if turn % 2 == 0:
#             print(f'Победил игрок!')
#         else:
#             print(f'Победил компьютер!')
#         break
#     turn += 1
#     count += 1
#
# # 40. Создайте программу для игры в "Крестики-нолики".
#
# # С РЕШЕНИЕМ ДАННОЙ ЗАДАЧИ САМОСТОЯТЕЛЬНО МНЕ СПРАИВТЬСЯ НЕ УДАЛОСЬ, В СВЯЗИ С ЭТИМ
# # Я РАЗОБРАЛА ГОТОВОЕ РЕШЕНИЕ, КАК ДОГОВАРИВАЛИСЬ НА СЕМИНАРЕ
#
# print("*" * 10, " Игра Крестики-нолики для двух игроков ", "*" * 10) #ВЫВОД НАЗВАНИЯ НА ПЕЧАТЬ
#
# #СОЗДАЕМ ДОСКУ
# board = list(range(1,10))       # вводим переменную для хранения ячеек поля от 1 до 9
#
# def draw_board(board):          # функция для рисования доски, название функции draw_board, аргумент board
#    print("-" * 13)              # минусы для рисования полосочек верхняя линия сетки
#    for i in range(3):           # сознаем цикл для поля
#       print("|", board[0+i*3], "|", board[1+i*3], "|", board[2+i*3], "|") # заполняем сетку значениями от 1 до 9
#       print("-" * 13)
#
# def take_input(player_token):   # функция для ввода данных пользователя
#    valid = False                # задаем переменную, по умолчанию False (нолик) для дальнейшего перевода ее в True
#    while not valid:             # задаем цикл, меняет значение переменной если результат Try
#       player_answer = input("Куда поставим " + player_token+"? ")   # создаем запрос на введение номера клетки,записываем в переменную
#       try:                                      # через конструкцию try-except делаем проверку на корректность ввода данных - число
#          player_answer = int(player_answer)     # переводим введенные данные и строки в число, если перевелось, программа идет далее, если нет, происходит перехват ошибки
#       except:                                   # перехватывает ошибку перевода в число
#          print("Некорректный ввод. Вы уверены, что ввели число?")   # выдает сообщение об ошибке
#          continue
#       if player_answer >= 1 and player_answer <= 9:     # проверяем на попадание в диапазон от 1 до 9, если от 1 до 9
#          if(str(board[player_answer-1]) not in "XO"):   # проверяем, что бы в клетке не было уже X или O
#             board[player_answer-1] = player_token       # если не ХО, ставим значение токена
#             valid = True                                # меняем значение валид
#          else:
#             print("Эта клетка уже занята!")             # иначе сообщаем что клетка занята
#       else:
#         print("Некорректный ввод. Введите число от 1 до 9.")    # иначе, если не выполняется условие от 1 до 9
#
# # создаем функцию проверки, выиграл ли игрок
# def check_win(board):
#    win_coord = ((0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)) # создаем кортеж выигрышных вариантов
#    for each in win_coord:                                       # проверяем значения в кортеже
#        if board[each[0]] == board[each[1]] == board[each[2]]:   # проверяем соответсвие данных выигрышным вариантам
#           return board[each[0]]                                 # если символы равны, возвращаем значение
#    return False
#
# def main(board):
#     counter = 0                                                 # создаем переменную для выбора Х или О
#     win = False                                                 # задаем переменную вин, по умолчанию фолс
#     while not win:                                              # до тех пор, пока не True
#         draw_board(board)                                       # вывод поля
#         if counter % 2 == 0:                                    # если четный ход (без деления на 2)
#            take_input("X")                                      # ставим Х
#         else:
#            take_input("O")                                      # иначе О (алгоритм смены игроков)
#         counter += 1                                            # проверка на совпадение условиям победы
#         if counter > 4:
#            tmp = check_win(board)
#            if tmp:
#               print(tmp, "выиграл!")
#               win = True
#               break
#         if counter == 9:
#             print("Ничья!")
#             break
#     draw_board(board)
# main(board)
#
# input("Нажмите Enter для выхода!")
#
# # 41. Реализуйте RLE алгоритм: реализуйте модуль сжатия и восстановления данных.
# # Входные и выходные данные хранятся в отдельных текстовых файлах.
#
#
# with open('my_file.txt', 'w', encoding='utf-8') as f:
#     f.write("рельсы рельсы шпалы шпалы ехал поезд запоздалый пришли гуси поклевали поклевали поклевали пришли куры пощипали пощипали пощипали")
#
# def encode(s):
#     encoding = ""
#     i = 0
#     while i < len(s):
#         count = 1
#         while i + 1 < len(s) and s[i] == s[i + 1]:
#             count = count + 1
#             i = i + 1
#         encoding += str(count) + s[i]
#         i = i + 1
#     return encoding
#
# if __name__ == '__main__':
#     with open('my_file.txt', 'r', encoding='utf-8') as f:
#         s = f.read().split()
#     with open('my_file_1.txt', 'w', encoding='utf-8') as f:
#         f.write(encode(s))
#
# import os
# stat_my_file=os.stat("my_file.txt")
# stat_my_file_1=os.stat("my_file_1.txt")
#
# print(f'Размер исходного файла {stat_my_file.st_size} бит\nРазмер сжатого файла {stat_my_file_1.st_size} бит')
#
